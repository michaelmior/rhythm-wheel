{"version":3,"sources":["Circle.js","Wheel.js","Player.js","App.js","serviceWorker.js","index.js"],"names":["Circle","react_default","a","createElement","className","style","backgroundColor","this","props","borderColor","borderRadius","radius","width","height","position","children","Component","defaultProps","Wheel","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","beat","setState","state","active","slice","includes","index","indexOf","splice","push","sort","b","objectSpread","audioContext","playing","initialState","playOrPause","bind","assertThisInitialized","scheduler","bounce","React","createRef","refCircle","path","_this2","soundObject","getSound","XMLHttpRequest","open","responseType","onload","decodeAudioData","response","buffer","soundToPlay","send","play","time","volume","createGain","gain","value","sound","playSound","createBufferSource","connect","destination","start","_this3","window","requestAnimationFrame","updateBounce","futureTickTime","currentTime","playOrNot","futureTick","timeout","setTimeout","_this4","current","setAttribute","soundBuffer","AudioContext","soundLoader","url","startTickTime","webkitAnimationPlayState","clearTimeout","coords","pointCoords","bpm","subdivisions","top","y","left","x","noteLength","subdivision","angle","Math","PI","sin","cos","padding","_this5","lines","lineIndexes","i","length","prevCoords","key","x1","y1","x2","y2","stroke","strokeWidth","display","pointerEvents","zIndex","smallRadius","ref","src_Circle_0","Array","from","_","cursor","onClick","map","Player","drums","hihat","kick","snare","margin","textAlign","src_Wheel_0","process","clear","fontSize","App","src_Player","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8aae3b9a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './Circle.css';\n\nclass Circle extends Component {\n  render() {\n    return <div className=\"Circle\" style={{\n      backgroundColor: this.props.backgroundColor,\n      borderColor: this.props.borderColor,\n      borderRadius: this.props.radius,\n      width: this.props.radius,\n      height: this.props.radius,\n      position: 'relative'\n    }}>{this.props.children}</div>;\n  }\n}\n\nCircle.defaultProps = {\n  backgroundColor: 'transparent',\n  borderColor: '#000',\n  radius: '100px'\n};\n\nexport default Circle;\n","import React, { Component } from 'react';\n\nimport Circle from './Circle';\n\nimport './Wheel.css';\n\nconst smallRadius = 2;\nconst padding = 10;\n\nclass Wheel extends Component {\n  constructor(props) {\n    super(props);\n\n    this.audioContext = null;\n    this.playing = false;\n    this.state = {\n      active: [],\n      ...props.initialState\n    };\n\n    this.playOrPause = this.playOrPause.bind(this);\n    this.scheduler = this.scheduler.bind(this);\n    this.bounce = React.createRef();\n    this.refCircle = React.createRef();\n  }\n\n  soundLoader(path) {\n    var soundObject = {};\n    var getSound = new XMLHttpRequest();\n\n    getSound.open('GET', path, true);\n    getSound.responseType = 'arraybuffer';\n    getSound.onload = () => {\n      this.audioContext.decodeAudioData(getSound.response, (buffer) => {\n        soundObject.soundToPlay = buffer;\n      });\n    }\n    getSound.send();\n\n    soundObject.play = (time) => {\n      var volume = this.audioContext.createGain();\n      volume.gain.value = this.props.sound.volume;\n      var playSound = this.audioContext.createBufferSource();\n      playSound.buffer = soundObject.soundToPlay;\n\n      // Volume control\n      playSound.connect(volume);\n      volume.connect(this.audioContext.destination);\n      playSound.start(time);\n    }\n\n    return soundObject;\n  }\n\n  scheduler() {\n    window.requestAnimationFrame(() => this.updateBounce());\n    while (this.futureTickTime < this.audioContext.currentTime + 0.1) {\n      this.playOrNot();\n      this.futureTick();\n    }\n    this.timeout = window.setTimeout(this.scheduler, 50.0);\n  }\n\n  playOrNot() {\n    if (!this.state.active.includes(this.current)) {\n      return;\n    }\n\n    this.refCircle.current.setAttribute('class', 'pulse-anim');\n    window.setTimeout(() => {\n      this.refCircle.current.setAttribute('class', '');\n    }, 100);\n\n    this.soundBuffer.play(this.futureTickTime);\n  }\n\n  playOrPause() {\n    if (this.props.sound && !this.audioContext) {\n      this.audioContext = new AudioContext();\n      this.soundBuffer = this.soundLoader(this.props.sound.url);\n    }\n\n    this.playing = !this.playing;\n    this.startTickTime = this.audioContext.currentTime;\n    if (this.playing) {\n      this.current = 0;\n      this.futureTickTime = this.audioContext.currentTime;\n      this.scheduler();\n      this.bounce.current.style.webkitAnimationPlayState = 'running';\n    } else {\n      this.bounce.current.style.webkitAnimationPlayState = 'paused';\n      this.updateBounce();\n      window.clearTimeout(this.timeout);\n    }\n  }\n\n  updateBounce() {\n    const coords = this.pointCoords((this.audioContext.currentTime - this.startTickTime) * (this.props.bpm / 15) % this.props.subdivisions);\n    this.bounce.current.style.top = coords.y + 'px';\n    this.bounce.current.style.left = coords.x + 'px';\n  }\n\n  futureTick() {\n    var noteLength = 60 / this.props.bpm;\n    this.futureTickTime += 0.25 * noteLength;\n    this.current = (this.current + 1) % (this.props.subdivisions);\n  }\n\n  pointCoords(subdivision) {\n    const angle = (Math.PI * 2) / this.props.subdivisions * subdivision;\n    const x = this.props.radius / 2 - smallRadius + Math.sin(angle) * (this.props.radius + smallRadius) / 2 + padding;\n    const y = this.props.radius - (this.props.radius / 2 - smallRadius + Math.cos(angle) * (this.props.radius + smallRadius) / 2) + padding / 2;\n\n    return {x, y};\n  }\n\n  handleClick = (beat) => {\n    this.setState((state) => {\n      let active = state.active.slice();\n      if (active.includes(beat)) {\n        const index = active.indexOf(beat);\n        active.splice(index, 1);\n      } else {\n        active.push(beat);\n        active.sort((a, b) => a - b);\n      }\n      return {...state, active};\n    });\n  }\n\n  render() {\n    let lines = [];\n    let lineIndexes = this.state.active.slice();\n    lineIndexes.push(lineIndexes[0]);\n    for (let i = 1; i < lineIndexes.length; i++) {\n      const coords = this.pointCoords(lineIndexes[i]);\n      const prevCoords = this.pointCoords(lineIndexes[i - 1]);\n      lines.push(<line key={'line' + i} x1={coords.x} y1={coords.y} x2={prevCoords.x} y2={prevCoords.y} stroke='black' strokeWidth='2' />);\n    }\n\n    const coords = this.pointCoords(0);\n    return <div className='Wheel' style={{position: 'relative', padding: padding + 'px', display: 'inline-block'}}>\n      <svg style={{pointerEvents: 'none', position: 'absolute', top: padding / 2 + 'px', left: padding / 2 + 'px', zIndex: 100}} width={this.props.radius + smallRadius * 4} height={this.props.radius + smallRadius * 4}>\n        {lines}\n      </svg>\n\n      <div ref={this.bounce} className='bounce' style={{position: 'absolute', top: coords.y + 'px', left: coords.x + 'px', zIndex: 999, pointerEvents: 'none'}}>\n        <Circle borderColor='goldenrod' backgroundColor='goldenrod' radius={(smallRadius * 2) + 'px'}/>\n      </div>\n\n      <div ref={this.refCircle}>\n        <Circle borderColor='white' radius={this.props.radius + 'px'}>{Array.from({length: this.props.subdivisions}, (_, i) => {\n        const coords = this.pointCoords(i);\n        return <div key={'refCircle' + i} style={{\n          cursor: 'pointer',\n          position: 'absolute',\n          top: (coords.y - padding - smallRadius * 1.6) + 'px',\n          left: (coords.x - padding - smallRadius * 1.5) + 'px'\n        }} onClick={this.handleClick.bind(this, i)}>\n          <Circle borderColor='white' backgroundColor='white' radius={(smallRadius * 2) + 'px'}/>\n        </div>\n        })}</Circle>\n      </div>\n      {this.state.active.map(i => {\n        const coords = this.pointCoords(i);\n        return <div key={'beatCircle' + i} style={{\n          position: 'absolute',\n          top: coords.y + 'px',\n          left: coords.x + 'px',\n          pointerEvents: 'none'\n        }}>\n          <Circle borderColor='black' backgroundColor='black' radius={(smallRadius * 2) + 'px'}/>\n        </div>\n      })}\n    </div>;\n  }\n}\n\nWheel.defaultProps = {\n  subdivisions: 16,\n  radius: 200\n};\n\nexport default Wheel;\n","import React, { Component } from 'react';\n\nimport Wheel from './Wheel';\n\nclass Player extends Component {\n  constructor() {\n    super();\n\n    this.state = {playing: false};\n    this.drums = {\n      hihat: React.createRef(),\n      kick: React.createRef(),\n      snare: React.createRef()\n    };\n  }\n\n  handleClick = () => {\n    this.setState((state) => {\n      return {...state, playing: !state.playing};\n    });\n\n    this.drums.hihat.current.playOrPause();\n    this.drums.kick.current.playOrPause();\n    this.drums.snare.current.playOrPause();\n  }\n\n  render() {\n    return <div style={{margin: '50px auto 0 auto', width: '800px', textAlign: 'center'}}>\n      <Wheel ref={this.drums.kick}\n             initialState={{active: [0, 8]}}\n             bpm={120} sound={{\n               volume: 10,\n               url: process.env.PUBLIC_URL + '/sounds/kick.mp3'\n             }}/>\n      <Wheel ref={this.drums.snare}\n             initialState={{active: [4, 12]}}\n             bpm={120} sound={{\n               volume: 10,\n               url: process.env.PUBLIC_URL + '/sounds/snare.mp3'\n             }}/>\n      <Wheel ref={this.drums.hihat}\n             initialState={{active: [0, 2, 4, 6, 8, 10, 12, 14, 16]}}\n             bpm={120} sound={{\n               volume: 8,\n               url: process.env.PUBLIC_URL + '/sounds/hat.mp3'\n             }}/>\n      <button style={{clear: 'both', display: 'block', margin: '0 auto', position: 'relative', top: '20px', fontSize: '20px'}} onClick={this.handleClick}>{this.state.playing ? 'Stop' : 'Play'}</button></div>;\n  }\n}\n\nexport default Player;\n","import React from 'react';\n\nimport Player from './Player';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Player/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}